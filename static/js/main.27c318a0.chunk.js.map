{"version":3,"sources":["helpers.js","Tile.js","Board.js","App.js","index.js"],"names":["isSolved","tiles","i","l","length","getMatrixPosition","index","rows","cols","row","Math","floor","col","shuffle","shuffledTiles","filter","t","sort","random","product","j","m","round","isSolvable","Tile","props","tile","width","height","boardSize","image","handleClick","onClick","visualPos","x","y","getVisualPosition","motionStyle","translateX","spring","translateY","tileStyle","backgroundImage","backgroundSize","backgroundPosition","style","transform","opacity","className","Board","useState","Array","keys","setTiles","started","setStarted","swapTiles","tileIndex","src","dest","srcRow","srcCol","destRow","destCol","abs","canSwap","indexOf","newTiles","tilesResult","swap","handleTileClick","solved","pieceWidth","pieceHeight","map","key","shuffleTiles","App","imageUrl","setImageUrl","onChange","event","target","value","type","name","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.27c318a0.chunk.js","sourcesContent":["// Credits to https://codepen.io/unindented/pen/QNWdRQ\nexport function isSolvable(tiles, rows, cols) {\n  let product = 1;\n  for (let i = 1, l = rows * cols - 1; i <= l; i++) {\n    for (let j = i + 1, m = l + 1; j <= m; j++) {\n      product *= (tiles[i - 1] - tiles[j - 1]) / (i - j);\n    }\n  }\n  return Math.round(product) === 1;\n}\n\nexport function isSolved(tiles) {\n  for (let i = 0, l = tiles.length; i < l; i++) {\n    if (tiles[i] !== i) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Get the linear index from a row/col pair.\nexport function getLinearPosition({ row, col }, rows, cols) {\n  return parseInt(row, 10) * cols + parseInt(col, 10);\n}\n\n// Get the row/col pair from a linear index.\nexport function getMatrixPosition(index, rows, cols) {\n  return {\n    row: Math.floor(index / cols),\n    col: index % cols,\n  };\n}\n\nexport function getVisualPosition({ row, col }, width, height) {\n  return {\n    x: col * width,\n    y: row * height,\n  };\n}\n\nexport function shuffle(tiles, rows, cols) {\n  const shuffledTiles = [\n    ...tiles\n      .filter((t) => t !== tiles.length - 1)\n      .sort(() => Math.random() - 0.5),\n    tiles.length - 1,\n  ];\n  return isSolvable(shuffledTiles, rows, cols) && !isSolved(shuffledTiles)\n    ? shuffledTiles\n    : shuffle(shuffledTiles, rows, cols);\n}\n\nexport function canSwap(src, dest, rows, cols) {\n  const { row: srcRow, col: srcCol } = getMatrixPosition(src, rows, cols);\n  const { row: destRow, col: destCol } = getMatrixPosition(dest, rows, cols);\n  return Math.abs(srcRow - destRow) + Math.abs(srcCol - destCol) === 1;\n}\n\nexport function swap(tiles, src, dest) {\n  const tilesResult = [...tiles];\n  [tilesResult[src], tilesResult[dest]] = [tilesResult[dest], tilesResult[src]];\n  return tilesResult;\n}\n","import React from \"react\";\nimport { Motion, spring } from \"react-motion\";\nimport { getMatrixPosition, getVisualPosition } from \"./helpers\";\n\nfunction Tile(props) {\n  const { tile, index, rows, cols, width, height, boardSize, image } = props;\n\n  const handleClick = () => {\n    props.onClick(index);\n  };\n\n  const matrixPos = getMatrixPosition(index, rows, cols);\n  const visualPos = getVisualPosition(matrixPos, width, height);\n  const motionStyle = {\n    translateX: spring(visualPos.x),\n    translateY: spring(visualPos.y),\n  };\n  const tileStyle = {\n    width: `calc(100% / ${rows})`,\n    height: `calc(100% / ${cols})`,\n    backgroundImage: `url(${image})`,\n    backgroundSize: `${boardSize * 1.25}px`,\n    backgroundPosition: `${(100 / cols) * (tile % cols)}% ${\n      (100 / rows) * Math.floor(tile / rows)\n    }%`,\n  };\n\n  return (\n    <Motion style={motionStyle}>\n      {({ translateX, translateY }) => (\n        <li\n          style={{\n            transform: `translate3d(${translateX}px, ${translateY}px, 0)`,\n            opacity: tile === rows * cols - 1 ? 0 : 1,\n            ...tileStyle,\n          }}\n          onClick={handleClick}\n          className=\"tile\"\n        >\n          {image.length ? \"\" : tile + 1}\n        </li>\n      )}\n    </Motion>\n  );\n}\n\nexport default Tile;\n","import React, { useState } from \"react\";\nimport { canSwap, isSolved, shuffle, swap } from \"./helpers\";\nimport Tile from \"./Tile\";\n\nfunction Board(props) {\n  const { rows, cols, width, height, image } = props;\n  const [tiles, setTiles] = useState([...Array(rows * cols).keys()]);\n  const [started, setStarted] = useState(false);\n\n  const shuffleTiles = () => {\n    const shuffledTiles = shuffle(tiles, rows, cols);\n    setTiles(shuffledTiles);\n  };\n\n  const swapTiles = (tileIndex) => {\n    if (canSwap(tileIndex, tiles.indexOf(tiles.length - 1), rows, cols)) {\n      const newTiles = swap(tiles, tileIndex, tiles.indexOf(tiles.length - 1));\n      setTiles(newTiles);\n    }\n  };\n\n  const handleTileClick = (index) => {\n    swapTiles(index);\n  };\n\n  const handleButtonClick = () => {\n    shuffleTiles();\n    setStarted(true);\n  };\n\n  const solved = isSolved(tiles);\n  const pieceWidth = Math.round(width / cols);\n  const pieceHeight = Math.round(height / rows);\n  const style = {\n    width,\n    height,\n  };\n\n  return (\n    <>\n      <ul style={style} className=\"board\">\n        {tiles.map((tile, index) => (\n          <Tile\n            {...props}\n            index={index}\n            tile={tile}\n            key={tile}\n            width={pieceWidth}\n            height={pieceHeight}\n            boardSize={width}\n            image={image}\n            onClick={handleTileClick}\n          />\n        ))}\n      </ul>\n      <div>{solved && started ? \"Puzzle solved ðŸ§  ðŸŽ‰\" : \"\"}</div>\n      <button onClick={handleButtonClick}>\n        {!started || solved ? \"Start\" : \"Restart\"}\n      </button>\n    </>\n  );\n}\n\nexport default Board;\n","import React, { useState } from \"react\";\nimport Board from \"./Board\";\n\nfunction App() {\n  const [imageUrl, setImageUrl] = useState(\"\");\n  const handleImageChange = (event) => {\n    setImageUrl(event.target.value);\n  };\n  return (\n    <div className=\"App\">\n      <Board rows={4} cols={4} width={320} height={320} image={imageUrl} />\n      <label>\n        Image:\n        <input onChange={handleImageChange} type=\"text\" name=\"name\" />\n      </label>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}